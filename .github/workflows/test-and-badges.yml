name: Tests and Badges

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

concurrency:
  group: test-badges-${{ github.ref }}
  cancel-in-progress: ${{ github.ref != 'refs/heads/main' }} # Don't cancel main branch runs

# Default permissions for all jobs
permissions:
  contents: read
  pull-requests: write # Only for PR comments

jobs:
  test:
    name: Test and Generate Badges
    runs-on: ubuntu-latest
    permissions:
      contents: write # Only needed for badge commits on main
      pull-requests: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Setup Node.js and pnpm
        uses: ./.github/actions/setup-node-pnpm
        with:
          node-version: '20'

      - name: Run linting
        run: pnpm lint

      - name: Build packages
        run: pnpm build

      - name: Run tests with coverage
        id: test
        run: |
          pnpm test:coverage
          echo "TESTS_PASSED=true" >> $GITHUB_ENV
          echo "BUILD_STATUS=passing" >> $GITHUB_ENV

      - name: Set test status on failure
        if: failure()
        run: |
          echo "TESTS_PASSED=false" >> $GITHUB_ENV
          echo "BUILD_STATUS=failing" >> $GITHUB_ENV

      - name: Generate badges
        run: |
          node scripts/badge-generator.js
        env:
          TESTS_PASSED: ${{ env.TESTS_PASSED }}
          BUILD_STATUS: ${{ env.BUILD_STATUS }}

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          files: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

      - name: Commit and push badges (main branch only)
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"

          # Check if badges have changed
          if [[ -n $(git status --porcelain badges/) ]]; then
            git add badges/
            git commit -m "chore: update badges [skip ci]"
            git push
          else
            echo "No badge changes to commit"
          fi

      - name: Upload badge artifacts
        if: github.event_name == 'pull_request'
        uses: actions/upload-artifact@v4
        with:
          name: badges
          path: badges/
          retention-days: 7

  coverage-comment:
    name: Coverage Comment
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'pull_request'

    steps:
      - name: Download badge artifacts
        uses: actions/download-artifact@v5
        with:
          name: badges
          path: badges/

      - name: Comment PR with coverage
        uses: actions/github-script@v8
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');

            // Read coverage badge if it exists
            let coverageInfo = 'Coverage data not available';
            const coverageBadgePath = 'badges/coverage.svg';
            if (fs.existsSync(coverageBadgePath)) {
              const badge = fs.readFileSync(coverageBadgePath, 'utf8');
              const match = badge.match(/coverage: (\d+%)/);
              if (match) {
                coverageInfo = `Coverage: ${match[1]}`;
              }
            }

            const comment = `## ðŸ“Š Test Results

            ${coverageInfo}

            View detailed badges in the artifacts of this workflow run.`;

            // Find existing comment
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('ðŸ“Š Test Results')
            );

            if (botComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: comment,
              });
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: comment,
              });
            }
