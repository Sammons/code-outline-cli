name: CI

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]

env:
  NODE_OPTIONS: '--max-old-space-size=4096'

# Cancel previous runs for the same PR/branch
concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  security-events: write # For CodeQL

jobs:
  # Build job - builds once and shares artifacts
  build:
    name: Build Packages
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Node.js and pnpm
        uses: ./.github/actions/setup-node-pnpm
        with:
          node-version: '20'

      - name: Cache build outputs
        uses: actions/cache@v4
        with:
          path: |
            packages/*/dist/
            packages/*/lib/
            node_modules/.cache/
          key: build-${{ runner.os }}-${{ hashFiles('**/pnpm-lock.yaml') }}-${{ hashFiles('packages/*/src/**') }}
          restore-keys: |
            build-${{ runner.os }}-${{ hashFiles('**/pnpm-lock.yaml') }}-
            build-${{ runner.os }}-

      - name: Build all packages
        run: pnpm build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            packages/*/dist/
            packages/*/lib/
          retention-days: 1

  # Security scanning job
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Node.js and pnpm
        uses: ./.github/actions/setup-node-pnpm
        with:
          node-version: '20'

      - name: Run security audit
        run: pnpm audit --audit-level moderate
        continue-on-error: true # Don't fail build for vulnerabilities

  # Code quality job (linting, formatting, type checking)
  quality:
    name: Code Quality
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Node.js and pnpm
        uses: ./.github/actions/setup-node-pnpm
        with:
          node-version: '20'

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: packages/

      - name: Check formatting
        run: npx prettier --check "**/*.{ts,tsx,js,jsx,json,md,yaml,yml}"

      - name: Run linter
        run: npx eslint . --ext .ts,.tsx

      - name: Type check
        run: npx tsc --noEmit

  # Test job with matrix strategy
  test:
    name: Test on Node.js ${{ matrix.node-version }}
    runs-on: ubuntu-latest
    needs: build

    strategy:
      matrix:
        node-version: ['20', '22']
      fail-fast: false

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Node.js and pnpm
        uses: ./.github/actions/setup-node-pnpm
        with:
          node-version: ${{ matrix.node-version }}

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: packages/

      - name: Run tests
        run: pnpm test:run

      - name: Test CLI functionality
        run: |
          # Check if CLI was built successfully
          if [ -f "packages/cli/dist/cli.js" ]; then
            echo "Testing CLI functionality..."
            cd packages/cli
            
            # Basic CLI tests
            node dist/cli.js --version
            node dist/cli.js --help
            
            # Test CLI with sample TypeScript files
            if [ -d "../../packages/parser/src" ]; then
              node dist/cli.js "../../packages/parser/src/**/*.ts" --format json --depth 1 > /tmp/test-output.json
              echo "CLI test completed"
            fi
          else
            echo "ERROR: CLI not built successfully"
            exit 1
          fi

      - name: Upload test coverage
        if: matrix.node-version == '20'
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage/
          retention-days: 7

  # CodeQL security analysis
  codeql:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    needs: build
    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: ['typescript']

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}

      - name: Setup Node.js and pnpm
        uses: ./.github/actions/setup-node-pnpm
        with:
          node-version: '20'

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: packages/

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: '/language:${{matrix.language}}'

  # Publish job (dry run for now)
  publish:
    name: Publish Check
    needs: [security, quality, test]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Node.js and pnpm
        uses: ./.github/actions/setup-node-pnpm
        with:
          node-version: '20'

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: packages/

      - name: Verify CLI can be packed
        run: |
          cd packages/cli
          pnpm pack
          echo "CLI package can be successfully packed for publishing"
