name: CI

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]

env:
  NODE_OPTIONS: '--max-old-space-size=4096'

jobs:
  # Security scanning job
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup pnpm
        uses: pnpm/action-setup@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run security audit
        run: pnpm audit --audit-level moderate
        continue-on-error: true

  # Code quality job (linting, formatting, type checking)
  quality:
    name: Code Quality
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup pnpm
        uses: pnpm/action-setup@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Check formatting
        run: npx prettier --check "**/*.{ts,tsx,js,jsx,json,md,yaml,yml}"

      - name: Run linter
        run: npx eslint . --ext .ts,.tsx

      - name: Type check
        run: npx tsc --noEmit

  # Build and test job
  test:
    name: Test on Node.js ${{ matrix.node-version }}
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [20.x, 22.x]
      fail-fast: false

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup pnpm
        uses: pnpm/action-setup@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build all packages
        run: |
          # Build packages in dependency order
          pnpm --filter @code-outline/parser build
          pnpm --filter @code-outline/formatter build
          pnpm --filter @sammons/code-outline-cli build
          pnpm --filter @code-outline/website build

      - name: Run tests
        run: pnpm test:run
        continue-on-error: true

      - name: Test CLI functionality
        run: |
          # Check if CLI was built successfully
          if [ -f "packages/cli/dist/cli.js" ]; then
            echo "Testing CLI functionality..."
            cd packages/cli
            
            # Basic CLI tests
            node dist/cli.js --version || echo "Version command failed"
            node dist/cli.js --help || echo "Help command failed"
            
            # Test CLI with sample TypeScript files
            if [ -d "../../packages/parser/src" ]; then
              node dist/cli.js "../../packages/parser/src/**/*.ts" --format json --depth 1 --output /tmp/test-output.json || echo "CLI parsing test failed"
              echo "CLI test completed"
            fi
          else
            echo "CLI not built successfully, skipping tests"
          fi

      - name: Upload test coverage
        if: matrix.node-version == '20.x'
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage/
          retention-days: 7
        continue-on-error: true

  # CodeQL security analysis
  codeql:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: ['typescript']

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build for CodeQL
        run: pnpm build

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: '/language:${{matrix.language}}'

  # Publish job (dry run for now)
  publish:
    name: Publish Check
    needs: [security, quality, test]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup pnpm
        uses: pnpm/action-setup@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          registry-url: 'https://registry.npmjs.org'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build all packages
        run: pnpm build

      - name: Validate packages for publishing
        run: |
          # Check each package that should be publishable
          cd packages/cli
          pnpm pack

          cd ../parser
          pnpm pack

          cd ../formatter
          pnpm pack

      - name: Publish to npm (dry run)
        run: |
          echo "This would publish packages to npm registry"
          echo "To enable actual publishing, replace this with:"
          echo "pnpm -r --filter=!@code-outline/website publish --dry-run"
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
